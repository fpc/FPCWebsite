#
# Common part of the UpdateArchive script for Free Pascal
#
# This script will create the daily sources and log files.
# It supports both the main branch as the fixes branch
#

if [ "$WORKDIR" = "" ]; then
    echo "Error workdir not set, this is a include script"
    exit 1
fi

##########################
# Configuration
#

PATH='.:$HOME/bin:/bin:/usr/bin:/usr/local/bin'

SVNROOT='https://svn.freepascal.org/svn'
export SVNROOT

SSH_EXTRA=""

##########################
# Procedures
#

moveto () {
FILE=$1
DESTDIR=$2
if [ "${DESTDIR//:/}" != "$DESTDIR" ] ; then
  echo "copying $FILE to $DESTDIR"
  scp -p $SSH_EXTRA $FILE $DESTDIR
else
  echo "mv -f $FILE $DESTDIR"
  mv -f $FILE $DESTDIR
fi
}

# checkoutmodules <checkoutdir> <tag> <modules>
checkoutmodules() {
  echo
  echo "Checkout modules $3 branch $2"
  echo
  # Create dir and go to the dir
  [ ! -d $1 ] && mkdir $1
  cd $1
  if [ "$2" != trunk ]; then
    BRANCH="branches/$2"
  else
    BRANCH="trunk"
  fi
  for f in $3; do
    svn co $SVNOPT $SVNROOT/$f/$BRANCH $f
    cd $f
    echo "Free pascal source checkout of $SVNROOT/$f/$BRANCH at `date`" > readme.rev
    svn info | grep -e "Revision" -e "URL" -e "Last Changed Rev" >> readme.rev
    echo "\"svnversion -c .\" output: `svnversion -c .`" >> readme.rev
    svn_externals=`svn pg svn:externals | cut -f 2 -d " " 2> /dev/null`
    echo "svn_externals=\"$svn_externals\""
    if [ -n "$svn_externals" ]; then
      svn pg svn:externals | cut -f 1 -d " " | xargs svn info | grep -e "Revision" -e "URL" -e "Last Changed Rev" >> readme.rev
      for dir in $svn_externals ; do
        echo "\"svnversion -c $dir\" output: `svnversion -c $dir`" >> readme.rev
        if [ "$dir" = "fpcsrc" ] ; then
          # Add svnversions of subdirectories used by testsuite
          echo "\"svnversion -c fpcsrc/compiler\" output: `svnversion -c fpcsrc/compiler`" >> readme.rev
          echo "\"svnversion -c fpcsrc/rtl\" output: `svnversion -c fpcsrc/rtl`" >> readme.rev
          echo "\"svnversion -c fpcsrc/packages\" output: `svnversion -c fpcsrc/packages`" >> readme.rev
          echo "\"svnversion -c fpcsrc/tests\" output: `svnversion -c fpcsrc/tests`" >> readme.rev
        fi
      done
    fi
    cd ..
  done
}

# copychanges <checkoutdir> <modules>
copychanges() {
    if [ -d $f/logs ]; then
        echo
        echo "Copying changes for modules $2"
        echo
        cd $1
        for f in $2; do
	    cp $f/logs/Changes.* $DESTDIR
	    for j in $DESTDIR/Changes.*; do
		touch --date "`head --bytes 16 $j`" $j
    	    done
        done
    else
        echo
        echo "No changes found for modules $2"
        echo
    fi
}

# zipmodules <checkoutdir> <modules> <destdir> <suffix>
zipmodules() {
  echo
  echo "Zipping modules $2 suffix $4"
  cd $1
  for f in $2; do
    zipfile=$f$4.zip
    if [ -f $zipfile ] ; then
      # Be sure to start with an empty file
      mv -f $zipfile $f$4-prev.zip
    fi
    zip -o -q -r $zipfile $f -x '*.svn*' -x '*.#*'     
    moveto $zipfile $3
    moveto $f/readme.rev $3/$f-readme
  done
}


# zippackages <fpcdir> <packages> <destdir> <suffix>
zippackages() {
  if [ "$2" != "" ]; then
    echo
    echo "Zipping packages $2 suffix $4 $3"
    cd $1
    for f in $2; do
      zip -o -q -r $f$4.zip $f -x '*.svn*' -x '*.#*'     
      moveto $f$4.zip $3
    done
  fi    
}


########################
# Main
########################

echo
echo "Creating working dirs"

# Create safe workdir
[ ! -d $WORKDIR ] && mkdir $WORKDIR
chmod 700 $WORKDIR

# Create the checkoutdir
[ ! -d $CHECKOUTDIR ] && mkdir $CHECKOUTDIR

# Update from cvs
checkoutmodules $CHECKOUTDIR $TAG "$MODULES"

# install logs also and set the timestamp to latest change
# copychanges $CHECKOUTDIR "$MODULES"

# Create zips of the modules
zipmodules $CHECKOUTDIR "$MODULES" $DESTDIR $SUFFIX

if [ "$ZIPNAME" == "" ] ; then
  ZIPNAME=base.zip
fi

if [ "$ZIPPACKAGES" != "" ]; then
    # Create zips of the packages
    zippackages $FPCDIR "$ZIPPACKAGES" $DESTDIR $SUFFIX

    # base dir, only the top Makefile,Makefile.fpc
    cd $CHECKOUTDIR/fpc
    zip -q -o $ZIPNAME Makefile Makefile.fpc
    moveto $ZIPNAME $DESTDIR
    if [ "${DESTDIR//:/}" != "$DESTDIR" ] ; then
      echo "Executing ssh $SSH_EXTRA ${DESTDIR//:*/} \"cd ${DESTDIR//*:/}; ls -l >index.txt\""
      ssh $SSH_EXTRA ${DESTDIR//:*/} "cd ${DESTDIR//*:/}; ls -l >index.txt"
    else
      # Add directory listing.
      cd $DESTDIR
      ls -l >index.txt
    fi
fi


